summary(d)
d = read_delim("data_in_R_format.txt", delim = "\t")
for(i in seq_along(d$subject)){
if(d$subject[i] == "Bryce"){
d$subject[i] <- "Z060"
}
if(d$subject[i] == "Wen"){
d$subject[i] <- "Z032"
}
if(d$ReactionTime[i] == "NaN"){
d$Correctness[i] <- "NaN"
}
}
## ----------------------------------------------------------------------
# Load data
## ----------------------------------------------------------------------
d = read_delim("data_in_R_format.txt", delim = "\t")
## ----------------------------------------------------------------------
# Prepare data
## ----------------------------------------------------------------------
for(i in seq_along(d$subject)){
# if(d$subject[i] == "Bryce"){
#   d$subject[i] <- "Z060"
# }
# if(d$subject[i] == "Wen"){
#   d$subject[i] <- "Z032"
# }
if(d$ReactionTime[i] == "NaN"){
d$Correctness[i] <- "NaN"
}
}
d %<>%
select(-index) %>%
filter(CueDirection %in% c(-1,1)) %>%
mutate(
CueValidity = case_when(
CueValidity == 0 ~ "invalid",
CueValidity == 1 ~ "valid",
CueValidity == 2 ~ "neutral",
T ~ NA_character_
),
CueDirection = case_when(
CueDirection == -1 ~ "bottom left",
CueDirection == 1 ~ "top right",
T ~ NA_character_
),
Correctness = case_when(
Correctness == 0 ~ "incorrect",
Correctness == 1 ~ "correct",
T ~ NA_character_
)
) %>%
mutate_at(
c("CueDirection", "CueValidity", "subject"),
.funs = factor
) %>%
droplevels()
contrasts(d$CueDirection) =
cbind(
"TR vs. BL" = c(-1, 1))
contrasts(d$CueValidity) =
cbind(
"Valid vs. neutral" = c(0, -1, 1),
"Invalid vs. neutral" = c(1, -1, 0))
summary(d)
l.rt = lm(ReactionTime ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity,
data = d)
summary(l.rt)
sink("l_rt.txt")
print(summary(l.rt))
sink()
ml.rt = lmer(ReactionTime ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d)
summary(ml.rt)
ranef(ml.rt)
ranef(ml.rt)
sink("linear_mixed_model_rt.txt")
print(summary(ml.rt))
sink()
sink("linear_mixed_model_rt.txt")
print(ranef(ml.rt))
sink("linear_mixed_model_rt.txt")
print(summary(ml.rt))
print(ranef(ml.rt))
sink()
ml.rt.acc.trial = lmer(ReactionTime ~ 1 + CueDirection * CueValidity +
Correctness +
Trial +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d)
summary(ml.rt.acc.trial)
ml.rt.acc.trial = lmer(ReactionTime ~ 1 + CueDirection * CueValidity +
Correctness +
trials +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d)
summary(ml.rt.acc.trial)
View(ml.rt.acc.trial)
View(ml.rt.acc.trial)
num_A_2cri = 1
num_A_2cri <- 1
num_A_4cri <-1
num_A_6cri <-1
num_Amin_4 <-1
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 1
num_A_4cri <-1
num_A_6cri <-1
num_Amin_4 <-1
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 1
num_A_4cri <-1
num_A_6cri <-1
num_Amin_4 <-1
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-15
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 1
num_A_4cri <-20
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 1
num_A_4cri <-25
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 1
num_A_4cri <-30
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-20
num_A_6cri <-3
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <15
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <15
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-15
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-20
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-25
num_A_6cri <-2
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-25
num_A_6cri <-4
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-25
num_A_6cri <-5
num_Amin_4 <-4
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-25
num_A_6cri <-5
num_Amin_4 <-5
totalCri <- num_A_2cri * 2 + (num_Amin_4+num_A_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4 *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-15
num_A_6cri <-2
num_Amin_4cri <-4
num_Bplus_4cri <-0
totalCri <- num_A_2cri * 2 + (num_Amin_4cri+num_A_4cri + num_Bplus_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4cri *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
num_A_2cri <- 0
num_A_4cri <-20
num_A_6cri <-2
num_Amin_4cri <-4
num_Bplus_4cri <-0
totalCri <- num_A_2cri * 2 + (num_Amin_4cri+num_A_4cri + num_Bplus_4cri)  * 4 + num_A_6cri * 6
GPA = (num_A_2cri * 4 * 2 + num_A_4cri *4 * 4 + num_Amin_4cri *3.7 * 4 + num_A_6cri * 4 * 6 )/totalCri
GPA
ml.acc = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc)
ranef(ml.acc)
ml.acc = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
d %>%
ggplot(aes(x = CueDirection, color = CueValidity, y = Correctness)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(.1)) +
facet_wrap(~ subject)
%>%
group_by(subject, CueDirection, CueValidity) %>%
dplyr::summarise(
Correctness = mean(Correctness, na.rm = T)
) %>%
ggplot(aes(x = CueDirection, color = CueValidity, y = Correctness)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(.1)) +
scale_y_continuous("Accuracy")
d %>%
group_by(subject, CueDirection, CueValidity) %>%
dplyr::summarise(
Correctness = mean(Correctness, na.rm = T)
) %>%
ggplot(aes(x = CueDirection, color = CueValidity, y = Correctness)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(.1)) +
scale_y_continuous("Accuracy")
clear
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
library(mgcv)
library(Hmisc)
d = read_delim("data_in_R_format.txt", delim = "\t")
View(d)
View(d)
for(i in seq_along(d$subject)){
# if(d$subject[i] == "Bryce"){
#   d$subject[i] <- "Z060"
# }
# if(d$subject[i] == "Wen"){
#   d$subject[i] <- "Z032"
# }
if(d$ReactionTime[i] == "NaN"){
d$Correctness[i] <- "NaN"
}
}
d %<>%
select(-index) %>%
filter(CueDirection %in% c(-1,1)) %>%
mutate(
CueValidity = case_when(
CueValidity == 0 ~ "invalid",
CueValidity == 1 ~ "valid",
CueValidity == 2 ~ "neutral",
T ~ NA_character_
),
CueDirection = case_when(
CueDirection == -1 ~ "bottom left",
CueDirection == 1 ~ "top right",
T ~ NA_character_
),
Correctness = case_when(
Correctness == 0 ~ "incorrect",
Correctness == 1 ~ "correct",
T ~ NA_character_
)
) %>%
mutate_at(
c("CueDirection", "CueValidity", "subject"),
.funs = factor
) %>%
droplevels()
contrasts(d$CueDirection) =
cbind(
"TR vs. BL" = c(-1, 1))
contrasts(d$CueValidity) =
cbind(
"Valid vs. neutral" = c(0, -1, 1),
"Invalid vs. neutral" = c(1, -1, 0))
summary(d)
summary(d)
d
summary(d)
library(tidyverse)
library(magrittr)
library(lme4)
library(lmerTest)
library(mgcv)
library(Hmisc)
d = read_delim("data_in_R_format.txt", delim = "\t")
for(i in seq_along(d$subject)){
# if(d$subject[i] == "Bryce"){
#   d$subject[i] <- "Z060"
# }
# if(d$subject[i] == "Wen"){
#   d$subject[i] <- "Z032"
# }
if(d$ReactionTime[i] == "NaN"){
d$Correctness[i] <- "NaN"
}
}
d %<>%
select(-index) %>%
filter(CueDirection %in% c(-1,1)) %>%
mutate(
CueValidity = case_when(
CueValidity == 0 ~ "invalid",
CueValidity == 1 ~ "valid",
CueValidity == 2 ~ "neutral",
T ~ NA_character_
),
CueDirection = case_when(
CueDirection == -1 ~ "bottom left",
CueDirection == 1 ~ "top right",
T ~ NA_character_
),
Correctness = case_when(
Correctness == 0 ~ "incorrect",
Correctness == 1 ~ "correct",
T ~ NA_character_
)
) %>%
mutate_at(
c("CueDirection", "CueValidity", "subject"),
.funs = factor
) %>%
droplevels()
contrasts(d$CueDirection) =
cbind(
"TR vs. BL" = c(-1, 1))
contrasts(d$CueValidity) =
cbind(
"Valid vs. neutral" = c(0, -1, 1),
"Invalid vs. neutral" = c(1, -1, 0))
summary(d)
ml.acc = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc)
ranef(ml.acc)
ml.acc.rt = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
log(ReactionTime) +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc.rt)
l.rt = lm(ReactionTime ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity,
data = d)
summary(l.rt)
d %>%
group_by(subject, CueDirection, CueValidity) %>%
dplyr::summarise(
Correctness = mean(Correctness, na.rm = T)
) %>%
ggplot(aes(x = CueDirection, color = CueValidity, y = Correctness)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(.1)) +
scale_y_continuous("Accuracy")
ml.acc.rt = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
log(ReactionTime) +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc.rt)
ml.acc = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc)
ranef(ml.acc)
d %>%
ggplot(aes(x = CueDirection, color = CueValidity, y = Correctness)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(.1)) +
facet_wrap(~ subject)
d %>%
group_by(subject, CueDirection, CueValidity) %>%
dplyr::summarise(
Correctness = mean(Correctness, na.rm = T)
) %>%
ggplot(aes(x = CueDirection, color = CueValidity, y = Correctness)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(.1)) +
scale_y_continuous("Accuracy")
ml.acc.rt = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
log(ReactionTime) +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc.rt)
d %>%
ggplot(aes(x = CueDirection, color = CueValidity, y = Correctness)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(.1)) +
facet_wrap(~ subject)
## ----------------------------------------------------------------------
# Prepare data
## ----------------------------------------------------------------------
for(i in seq_along(d$subject)){
# if(d$subject[i] == "Bryce"){
#   d$subject[i] <- "Z060"
# }
# if(d$subject[i] == "Wen"){
#   d$subject[i] <- "Z032"
# }
if(d$ReactionTime[i] == "NaN"){
d$Correctness[i] <- "NaN"
}
}
d %<>%
select(-index) %>%
filter(CueDirection %in% c(-1,1)) %>%
mutate(
CueValidity = case_when(
CueValidity == 0 ~ "invalid",
CueValidity == 1 ~ "valid",
CueValidity == 2 ~ "neutral",
T ~ NA_character_
),
CueDirection = case_when(
CueDirection == -1 ~ "bottom left",
CueDirection == 1 ~ "top right",
T ~ NA_character_
),
Correctness = case_when(
Correctness == 0 ~ "incorrect",
Correctness == 1 ~ "correct",
T ~ NA_character_
)
) %>%
mutate_at(
c("CueDirection", "CueValidity", "subject"),
.funs = factor
) %>%
droplevels()
contrasts(d$CueDirection) =
cbind(
"TR vs. BL" = c(-1, 1))
contrasts(d$CueValidity) =
cbind(
"Valid vs. neutral" = c(0, -1, 1),
"Invalid vs. neutral" = c(1, -1, 0))
summary(d)
ml.acc = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc)
ranef(ml.acc)
mkRespMod
ml.acc = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d)
# family = "binomial")
summary(ml.acc)
ranef(ml.acc)
ml.acc = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d)
ml.acc.rt = glmer(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
log(ReactionTime) +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "binomial")
summary(ml.acc.rt)
library(brms)
bl.acc.rt = brm(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
log(ReactionTime) +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "bernoulli")
summary(bl.acc.rt)
install.packages("brms")
library(brms)
bl.acc.rt = brm(Correctness ~ 1 + CueDirection + CueValidity + CueDirection:CueValidity +
log(ReactionTime) +
(1 + CueDirection + CueValidity + CueDirection:CueValidity | subject),
data = d,
family = "bernoulli")
summary(bl.acc.rt)
summary(bl.acc.rt)
